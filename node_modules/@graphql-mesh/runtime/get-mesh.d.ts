import { GraphQLSchema, DocumentNode, GraphQLError } from 'graphql';
import { ExecuteMeshFn, GetMeshOptions, Requester, SubscribeMeshFn } from './types';
import { MeshPubSub, KeyValueCache, RawSourceOutput } from '@graphql-mesh/types';
export declare function getMesh(options: GetMeshOptions): Promise<{
    execute: ExecuteMeshFn;
    subscribe: SubscribeMeshFn;
    schema: GraphQLSchema;
    rawSources: RawSourceOutput[];
    sdkRequester: Requester;
    contextBuilder: (initialContextValue?: any) => Promise<Record<string, any>>;
    destroy: () => void;
    pubsub: MeshPubSub;
    cache: KeyValueCache;
}>;
export declare class GraphQLMeshSdkError<Data = any, Variables = any> extends Error {
    errors: ReadonlyArray<GraphQLError>;
    document: DocumentNode;
    variables: Variables;
    data: Data;
    constructor(errors: ReadonlyArray<GraphQLError>, document: DocumentNode, variables: Variables, data: Data);
}
