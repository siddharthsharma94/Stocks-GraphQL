import { MeshHandlerLibrary, KeyValueCache, YamlConfig, MergerFn, ImportFn, MeshPubSub } from '@graphql-mesh/types';
import { IResolvers } from '@graphql-tools/utils';
export declare function getPackage<T>(name: string, type: string, importFn: ImportFn): Promise<T>;
export declare function getHandler(name: keyof YamlConfig.Handler, importFn: ImportFn): Promise<MeshHandlerLibrary>;
export declare function resolveAdditionalTypeDefs(baseDir: string, additionalTypeDefs: string): Promise<import("graphql").DocumentNode[]>;
export declare function resolveAdditionalResolvers(baseDir: string, additionalResolvers: (string | YamlConfig.AdditionalStitchingResolverObject | YamlConfig.AdditionalSubscriptionObject)[], importFn: ImportFn, pubsub: MeshPubSub): Promise<IResolvers>;
export declare function resolveCache(cacheConfig: YamlConfig.Config['cache'], importFn: ImportFn): Promise<KeyValueCache | undefined>;
export declare function resolvePubSub(pubsubYamlConfig: YamlConfig.Config['pubsub'], importFn: ImportFn): Promise<MeshPubSub>;
export declare function resolveMerger(mergerConfig: YamlConfig.Config['merger'], importFn: ImportFn): Promise<MergerFn>;
