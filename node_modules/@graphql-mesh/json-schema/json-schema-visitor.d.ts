import { JSONSchemaDefinition, JSONSchemaArrayDefinition, JSONSchemaObjectReference, JSONSchemaEnumDefinition, JSONSchemaTypedUnnamedObjectDefinition, JSONSchemaTypedNamedObjectDefinition, JSONSchemaStringDefinition, JSONSchemaOneOfDefinition } from './json-schema-types';
import { SchemaComposer } from 'graphql-compose';
export declare const getFileName: (filePath: string) => string;
export declare class JSONSchemaVisitor<TContext> {
    private schemaComposer;
    private isInput;
    private externalFileCache;
    private disableTimestamp;
    private cache;
    private ajv;
    constructor(schemaComposer: SchemaComposer<TContext>, isInput: boolean, externalFileCache?: Map<string, any>, disableTimestamp?: boolean);
    private visitedRefNameMap;
    createName({ ref, cwd }: {
        ref: string;
        cwd: string;
    }): string;
    private namedVisitedDefs;
    visit({ def, propertyName, prefix, cwd, ignoreResult, typeName, }: {
        def: JSONSchemaDefinition;
        propertyName: string;
        prefix: string;
        cwd: string;
        ignoreResult?: boolean;
        typeName?: string;
    }): string;
    visitArray({ arrayDef, propertyName, prefix, cwd, typeName, }: {
        arrayDef: JSONSchemaArrayDefinition;
        propertyName: string;
        prefix: string;
        cwd: string;
        typeName?: string;
    }): string;
    visitBoolean(): string;
    visitInteger(): string;
    visitNumber(): string;
    visitString({ stringDef, propertyName, prefix, cwd, typeName, }: {
        stringDef: JSONSchemaStringDefinition;
        propertyName: string;
        prefix: string;
        cwd: string;
        typeName?: string;
    }): string;
    visitEnum({ enumDef, propertyName, prefix, cwd, typeName, }: {
        enumDef: JSONSchemaEnumDefinition;
        propertyName: string;
        prefix: string;
        cwd: string;
        typeName?: string;
    }): string;
    private createFieldsMapFromProperties;
    private getGraphQLObjectTypeWithTypedObjectDef;
    visitTypedUnnamedObjectDefinition({ typedUnnamedObjectDef, propertyName, prefix, cwd, typeName, }: {
        typedUnnamedObjectDef: JSONSchemaTypedUnnamedObjectDefinition;
        propertyName: string;
        prefix: string;
        cwd: string;
        typeName?: string;
    }): string;
    visitTypedNamedObjectDefinition({ typedNamedObjectDef, cwd, typeName, }: {
        typedNamedObjectDef: JSONSchemaTypedNamedObjectDefinition;
        cwd: string;
        typeName?: string;
    }): string;
    visitObjectReference({ objectRef, cwd, typeName, }: {
        objectRef: JSONSchemaObjectReference;
        cwd: string;
        typeName: string;
    }): string;
    visitAny(): string;
    visitNull(): string;
    visitOneOfReference({ oneOfReference, propertyName, prefix, cwd, typeName, }: {
        oneOfReference: JSONSchemaOneOfDefinition;
        propertyName: string;
        prefix: string;
        cwd: string;
        typeName?: string;
    }): string;
}
