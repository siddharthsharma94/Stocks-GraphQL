{"version":3,"file":"index.esm.js","sources":["../../../dist/mergers/stitching/src/mergeSingleSchema.js","../../../dist/mergers/stitching/src/index.js"],"sourcesContent":["import { extendSchema } from 'graphql';\nimport { wrapSchema } from '@graphql-tools/wrap';\nimport { addResolversToSchema } from '@graphql-tools/schema';\nimport { groupTransforms } from '@graphql-mesh/utils';\nimport { applySchemaTransforms } from '@graphql-tools/utils';\nexport const mergeSingleSchema = ({ rawSources, typeDefs, resolvers, transforms }) => {\n    if (rawSources.length !== 1) {\n        throw new Error('This merger supports only one schema');\n    }\n    const [source] = rawSources;\n    let schema = source.schema;\n    let wrapTransforms = [];\n    let noWrapTransforms = [];\n    if (transforms === null || transforms === void 0 ? void 0 : transforms.length) {\n        const transformGroups = groupTransforms(transforms);\n        wrapTransforms = transformGroups.wrapTransforms;\n        noWrapTransforms = transformGroups.noWrapTransforms;\n    }\n    if (source.executor || source.subscriber || source.transforms.length) {\n        const firstRoundTransforms = [...source.transforms];\n        if (!typeDefs && !resolvers) {\n            firstRoundTransforms.push(...wrapTransforms, ...noWrapTransforms);\n        }\n        schema = wrapSchema({\n            ...source,\n            schema,\n            transforms: firstRoundTransforms,\n        });\n    }\n    if (typeDefs || resolvers) {\n        typeDefs === null || typeDefs === void 0 ? void 0 : typeDefs.forEach(typeDef => {\n            schema = extendSchema(schema, typeDef);\n        });\n        if (resolvers) {\n            schema = addResolversToSchema({\n                schema,\n                resolvers,\n                updateResolversInPlace: true,\n            });\n        }\n        if (wrapTransforms.length) {\n            schema = wrapSchema(schema, [...wrapTransforms, ...noWrapTransforms]);\n        }\n        else if (noWrapTransforms.length) {\n            schema = applySchemaTransforms(schema, noWrapTransforms);\n        }\n    }\n    schema.extensions = schema.extensions || {};\n    Object.defineProperty(schema.extensions, 'sourceMap', {\n        get: () => new Map([[source, schema]]),\n    });\n    return schema;\n};\n//# sourceMappingURL=mergeSingleSchema.js.map","import { stitchSchemas } from '@graphql-tools/stitch';\nimport { wrapSchema } from '@graphql-tools/wrap';\nimport { mergeSingleSchema } from './mergeSingleSchema';\nimport { groupTransforms } from '@graphql-mesh/utils';\nimport { applySchemaTransforms } from '@graphql-tools/utils';\nconst mergeUsingStitching = async function (options) {\n    if (options.rawSources.length === 1) {\n        return mergeSingleSchema(options);\n    }\n    const { rawSources, typeDefs, resolvers, transforms } = options;\n    let unifiedSchema = stitchSchemas({\n        subschemas: rawSources,\n        typeDefs,\n        resolvers,\n    });\n    unifiedSchema.extensions = unifiedSchema.extensions || {};\n    Object.defineProperty(unifiedSchema.extensions, 'sourceMap', {\n        get: () => unifiedSchema.extensions.stitchingInfo.transformedSchemas,\n    });\n    if (transforms === null || transforms === void 0 ? void 0 : transforms.length) {\n        const { noWrapTransforms, wrapTransforms } = groupTransforms(transforms);\n        if (wrapTransforms.length) {\n            unifiedSchema = wrapSchema({\n                schema: unifiedSchema,\n                batch: true,\n                transforms: wrapTransforms,\n            });\n        }\n        if (noWrapTransforms.length) {\n            unifiedSchema = applySchemaTransforms(unifiedSchema, noWrapTransforms);\n        }\n    }\n    return unifiedSchema;\n};\nexport default mergeUsingStitching;\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":";;;;;;;AAKO,MAAM,iBAAiB,GAAG,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,KAAK;AACtF,IAAI,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;AACjC,QAAQ,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;AAChE,KAAK;AACL,IAAI,MAAM,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC;AAChC,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAC/B,IAAI,IAAI,cAAc,GAAG,EAAE,CAAC;AAC5B,IAAI,IAAI,gBAAgB,GAAG,EAAE,CAAC;AAC9B,IAAI,IAAI,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE;AACnF,QAAQ,MAAM,eAAe,GAAG,eAAe,CAAC,UAAU,CAAC,CAAC;AAC5D,QAAQ,cAAc,GAAG,eAAe,CAAC,cAAc,CAAC;AACxD,QAAQ,gBAAgB,GAAG,eAAe,CAAC,gBAAgB,CAAC;AAC5D,KAAK;AACL,IAAI,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE;AAC1E,QAAQ,MAAM,oBAAoB,GAAG,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;AAC5D,QAAQ,IAAI,CAAC,QAAQ,IAAI,CAAC,SAAS,EAAE;AACrC,YAAY,oBAAoB,CAAC,IAAI,CAAC,GAAG,cAAc,EAAE,GAAG,gBAAgB,CAAC,CAAC;AAC9E,SAAS;AACT,QAAQ,MAAM,GAAG,UAAU,CAAC;AAC5B,YAAY,GAAG,MAAM;AACrB,YAAY,MAAM;AAClB,YAAY,UAAU,EAAE,oBAAoB;AAC5C,SAAS,CAAC,CAAC;AACX,KAAK;AACL,IAAI,IAAI,QAAQ,IAAI,SAAS,EAAE;AAC/B,QAAQ,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,IAAI;AACxF,YAAY,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACnD,SAAS,CAAC,CAAC;AACX,QAAQ,IAAI,SAAS,EAAE;AACvB,YAAY,MAAM,GAAG,oBAAoB,CAAC;AAC1C,gBAAgB,MAAM;AACtB,gBAAgB,SAAS;AACzB,gBAAgB,sBAAsB,EAAE,IAAI;AAC5C,aAAa,CAAC,CAAC;AACf,SAAS;AACT,QAAQ,IAAI,cAAc,CAAC,MAAM,EAAE;AACnC,YAAY,MAAM,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,cAAc,EAAE,GAAG,gBAAgB,CAAC,CAAC,CAAC;AAClF,SAAS;AACT,aAAa,IAAI,gBAAgB,CAAC,MAAM,EAAE;AAC1C,YAAY,MAAM,GAAG,qBAAqB,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;AACrE,SAAS;AACT,KAAK;AACL,IAAI,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,IAAI,EAAE,CAAC;AAChD,IAAI,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,EAAE,WAAW,EAAE;AAC1D,QAAQ,GAAG,EAAE,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;AAC9C,KAAK,CAAC,CAAC;AACP,IAAI,OAAO,MAAM,CAAC;AAClB,CAAC;;AC/CD,MAAM,mBAAmB,GAAG,gBAAgB,OAAO,EAAE;AACrD,IAAI,IAAI,OAAO,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;AACzC,QAAQ,OAAO,iBAAiB,CAAC,OAAO,CAAC,CAAC;AAC1C,KAAK;AACL,IAAI,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;AACpE,IAAI,IAAI,aAAa,GAAG,aAAa,CAAC;AACtC,QAAQ,UAAU,EAAE,UAAU;AAC9B,QAAQ,QAAQ;AAChB,QAAQ,SAAS;AACjB,KAAK,CAAC,CAAC;AACP,IAAI,aAAa,CAAC,UAAU,GAAG,aAAa,CAAC,UAAU,IAAI,EAAE,CAAC;AAC9D,IAAI,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,UAAU,EAAE,WAAW,EAAE;AACjE,QAAQ,GAAG,EAAE,MAAM,aAAa,CAAC,UAAU,CAAC,aAAa,CAAC,kBAAkB;AAC5E,KAAK,CAAC,CAAC;AACP,IAAI,IAAI,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE;AACnF,QAAQ,MAAM,EAAE,gBAAgB,EAAE,cAAc,EAAE,GAAG,eAAe,CAAC,UAAU,CAAC,CAAC;AACjF,QAAQ,IAAI,cAAc,CAAC,MAAM,EAAE;AACnC,YAAY,aAAa,GAAG,UAAU,CAAC;AACvC,gBAAgB,MAAM,EAAE,aAAa;AACrC,gBAAgB,KAAK,EAAE,IAAI;AAC3B,gBAAgB,UAAU,EAAE,cAAc;AAC1C,aAAa,CAAC,CAAC;AACf,SAAS;AACT,QAAQ,IAAI,gBAAgB,CAAC,MAAM,EAAE;AACrC,YAAY,aAAa,GAAG,qBAAqB,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;AACnF,SAAS;AACT,KAAK;AACL,IAAI,OAAO,aAAa,CAAC;AACzB,CAAC;;;;"}