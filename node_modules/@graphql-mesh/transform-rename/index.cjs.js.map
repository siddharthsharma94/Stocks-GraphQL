{"version":3,"file":"index.cjs.js","sources":["../../../dist/transforms/rename/src/index.js"],"sourcesContent":["import { RenameTypes, RenameObjectFields, RenameRootFields, RenameRootTypes, RenameInputObjectFields, } from '@graphql-tools/wrap';\nimport { applySchemaTransforms, applyRequestTransforms, applyResultTransforms, } from '@graphql-tools/utils';\nexport default class RenameTransform {\n    constructor(options) {\n        this.transforms = [];\n        const { config } = options;\n        for (const change of config) {\n            const [fromTypeName, fromFieldName] = change.from.split('.');\n            const [toTypeName, toFieldName] = change.to.split('.');\n            if (fromTypeName !== toTypeName) {\n                this.transforms.push(new RenameRootTypes(t => (t === fromTypeName ? toTypeName : t)));\n                this.transforms.push(new RenameTypes(t => (t === fromTypeName ? toTypeName : t)));\n            }\n            if (fromFieldName && toFieldName && fromFieldName !== toFieldName) {\n                this.transforms.push(new RenameRootFields((typeName, fieldName) => typeName === toTypeName && fieldName === fromFieldName ? toFieldName : fieldName));\n                this.transforms.push(new RenameObjectFields((typeName, fieldName) => typeName === toTypeName && fieldName === fromFieldName ? toFieldName : fieldName));\n                this.transforms.push(new RenameInputObjectFields((typeName, fieldName) => typeName === toTypeName && fieldName === fromFieldName ? toFieldName : fieldName));\n            }\n        }\n    }\n    transformSchema(schema) {\n        return applySchemaTransforms(schema, this.transforms);\n    }\n    transformRequest(request) {\n        return applyRequestTransforms(request, this.transforms);\n    }\n    transformResult(result) {\n        return applyResultTransforms(result, this.transforms);\n    }\n}\n//# sourceMappingURL=index.js.map"],"names":["RenameRootTypes","RenameTypes","RenameRootFields","RenameObjectFields","RenameInputObjectFields","applySchemaTransforms","applyRequestTransforms","applyResultTransforms"],"mappings":";;;;;AAEe,MAAM,eAAe,CAAC;AACrC,IAAI,WAAW,CAAC,OAAO,EAAE;AACzB,QAAQ,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AAC7B,QAAQ,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;AACnC,QAAQ,KAAK,MAAM,MAAM,IAAI,MAAM,EAAE;AACrC,YAAY,MAAM,CAAC,YAAY,EAAE,aAAa,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACzE,YAAY,MAAM,CAAC,UAAU,EAAE,WAAW,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACnE,YAAY,IAAI,YAAY,KAAK,UAAU,EAAE;AAC7C,gBAAgB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAIA,oBAAe,CAAC,CAAC,KAAK,CAAC,KAAK,YAAY,GAAG,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACtG,gBAAgB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAIC,gBAAW,CAAC,CAAC,KAAK,CAAC,KAAK,YAAY,GAAG,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAClG,aAAa;AACb,YAAY,IAAI,aAAa,IAAI,WAAW,IAAI,aAAa,KAAK,WAAW,EAAE;AAC/E,gBAAgB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAIC,qBAAgB,CAAC,CAAC,QAAQ,EAAE,SAAS,KAAK,QAAQ,KAAK,UAAU,IAAI,SAAS,KAAK,aAAa,GAAG,WAAW,GAAG,SAAS,CAAC,CAAC,CAAC;AACtK,gBAAgB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAIC,uBAAkB,CAAC,CAAC,QAAQ,EAAE,SAAS,KAAK,QAAQ,KAAK,UAAU,IAAI,SAAS,KAAK,aAAa,GAAG,WAAW,GAAG,SAAS,CAAC,CAAC,CAAC;AACxK,gBAAgB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAIC,4BAAuB,CAAC,CAAC,QAAQ,EAAE,SAAS,KAAK,QAAQ,KAAK,UAAU,IAAI,SAAS,KAAK,aAAa,GAAG,WAAW,GAAG,SAAS,CAAC,CAAC,CAAC;AAC7K,aAAa;AACb,SAAS;AACT,KAAK;AACL,IAAI,eAAe,CAAC,MAAM,EAAE;AAC5B,QAAQ,OAAOC,2BAAqB,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;AAC9D,KAAK;AACL,IAAI,gBAAgB,CAAC,OAAO,EAAE;AAC9B,QAAQ,OAAOC,4BAAsB,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;AAChE,KAAK;AACL,IAAI,eAAe,CAAC,MAAM,EAAE;AAC5B,QAAQ,OAAOC,2BAAqB,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;AAC9D,KAAK;AACL;;;;"}