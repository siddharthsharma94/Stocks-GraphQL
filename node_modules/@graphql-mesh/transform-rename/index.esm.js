import { RenameRootTypes, RenameTypes, RenameRootFields, RenameObjectFields, RenameInputObjectFields } from '@graphql-tools/wrap';
import { applySchemaTransforms, applyRequestTransforms, applyResultTransforms } from '@graphql-tools/utils';

class RenameTransform {
    constructor(options) {
        this.transforms = [];
        const { config } = options;
        for (const change of config) {
            const [fromTypeName, fromFieldName] = change.from.split('.');
            const [toTypeName, toFieldName] = change.to.split('.');
            if (fromTypeName !== toTypeName) {
                this.transforms.push(new RenameRootTypes(t => (t === fromTypeName ? toTypeName : t)));
                this.transforms.push(new RenameTypes(t => (t === fromTypeName ? toTypeName : t)));
            }
            if (fromFieldName && toFieldName && fromFieldName !== toFieldName) {
                this.transforms.push(new RenameRootFields((typeName, fieldName) => typeName === toTypeName && fieldName === fromFieldName ? toFieldName : fieldName));
                this.transforms.push(new RenameObjectFields((typeName, fieldName) => typeName === toTypeName && fieldName === fromFieldName ? toFieldName : fieldName));
                this.transforms.push(new RenameInputObjectFields((typeName, fieldName) => typeName === toTypeName && fieldName === fromFieldName ? toFieldName : fieldName));
            }
        }
    }
    transformSchema(schema) {
        return applySchemaTransforms(schema, this.transforms);
    }
    transformRequest(request) {
        return applyRequestTransforms(request, this.transforms);
    }
    transformResult(result) {
        return applyResultTransforms(result, this.transforms);
    }
}

export default RenameTransform;
//# sourceMappingURL=index.esm.js.map
